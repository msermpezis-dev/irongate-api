# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  IMAGE_NAME: ${{ github.repository }}:${{ github.sha }}
  IMAGE_PATH: .

permissions:
  contents: read

jobs:
#  detect-secrets:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - name: GitGuardian Secrets scan
#        uses: GitGuardian/ggshield/actions/secret@main
#        env:
#          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
#          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
#          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
#          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
#          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
#
#  sbom-scan:
#    runs-on: ubuntu-latest
#    needs: detect-secrets
#    steps:
#    - uses: actions/checkout@v3
#    - name: Generate Python SBOM
#      uses: CycloneDX/gh-python-generate-sbom@v2
#      id: sbom-scan
#      with:
#        input: ./requirements.txt
#        output: ./bom.json
#        format: json
#    - name: Scan SBOM
#      id: scan
#      uses: anchore/scan-action@v3
#      with:
#        sbom: "./bom.json"
#        fail-build: false
#    - name: View Scan Report
#      if: always()
#      run: cat ${{ steps.scan.outputs.sarif }}
#
#  sonarcloud:
#    runs-on: ubuntu-latest
#    needs: [ detect-secrets, sbom-scan ]
#    steps:
#      - uses: actions/checkout@v3
#        with:
#          # Disabling shallow clone is recommended for improving relevancy of reporting
#          fetch-depth: 0
#      - name: SonarCloud Scan
#        uses: sonarsource/sonarcloud-github-action@master
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#
#  lint-and-unit-test:
#    runs-on: ubuntu-latest
#    needs: sonarcloud
#    steps:
#      - uses: actions/checkout@v3
#      - name: Set up Python 3.10.13
#        uses: actions/setup-python@v3
#        with:
#          python-version: "3.10.13"
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install flake8 pytest
#          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#      - name: Lint with flake8
#        run: |
#          # stop the build if there are Python syntax errors or undefined names
#          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
#          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
#          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
#      - name: Test with pytest
#        run: |
#          pytest
#
#  checkov-dockerfile-scan:
#    runs-on: ubuntu-latest
#    needs: lint-and-unit-test
#    steps:
#    - uses: actions/checkout@v3
#
#    - name: Checkov GitHub Action
#      uses: bridgecrewio/checkov-action@v12
#      with:
#        quiet: true # optional: display only failed checks
#        soft_fail: true
#        output_format: cli
#        output_file_path: console

#  checkov-image-scan:
#    runs-on: ubuntu-latest
#    name: checkov-image-scan
#    needs: checkov-dockerfile-scan
#    steps:
#    - name: Checkout repo
#      uses: actions/checkout@master
#
#    - name: Build the image
#      run: docker build -t ${{ env.IMAGE_NAME }} ${{ env.IMAGE_PATH }}
#
#    - name: Run Checkov action
#      id: checkov
#      uses: bridgecrewio/checkov-action@v12
#      with:
#        quiet: true # optional: display only failed checks
#        soft_fail: true # optional: do not return an error code if there are failed checks
#        log_level: DEBUG # optional: set log level. Default WARNING
#        docker_image: ${{ env.IMAGE_NAME }} # define the name of the image to scan
#        dockerfile_path: ${{ format('{0}/Dockerfile', env.IMAGE_PATH) }} # path to the Dockerfile
#        container_user: 0 # optional: Define what UID and / or what GID to run the container under to prevent permission issues
#        api-key: ${{ secrets.BC_API_KEY }} # Bridgecrew API key stored as a GitHub secret

  build-image-and-sign:
      runs-on: ubuntu-latest

      permissions:
        contents: read
        packages: write

      name: build-image
#      needs: checkov-dockerfile-scan
      steps:
        - uses: actions/checkout@v3.5.2
          with:
            fetch-depth: 1

        - name: Install Cosign
          uses: sigstore/cosign-installer@v3.1.1

        - name: Set up QEMU
          uses: docker/setup-qemu-action@v2.1.0

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3

        - name: Login to GitHub Container Registry
          uses: docker/login-action@v2.1.0
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

        - id: docker_meta
          uses: docker/metadata-action@v4.4.0
          with:
            images: ${{ secrets.DOCKERHUB_USERNAME }}/irongate-api
            tags: type=sha,format=long

        - name: Build and Push container images
          uses: docker/build-push-action@v5.0.0
          id: build-and-push
          with:
            push: true
            tags: ${{ steps.docker_meta.outputs.tags }}

        # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
        - name: Sign image with a key
          run: |
            cosign sign --yes --key env://COSIGN_PRIVATE_KEY "${TAGS}@${DIGEST}"
          env:
            TAGS: ${{ steps.docker_meta.outputs.tags }}
            COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
            COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
            DIGEST: ${{ steps.build-and-push.outputs.digest }}